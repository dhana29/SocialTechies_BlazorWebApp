@page "/monitor"

@using SocialTechies_BlazorWebApp.Data.Aws
@using System.Globalization
@inject AwsService AwsService




<h1>Monitor</h1>

<span class="float-right">Last updated at @lastUpdatedTime</span>


@foreach (var app in applications) {
    <CpuGraph application=@app></CpuGraph>
}

@code {
    private List<AwsInstance> awsInstances = null;
    private List<ApplicationContext> applications = new List<ApplicationContext>();
    string lastUpdatedTime = DateTime.Now.ToLongTimeString();

    int period = 3600; // 1 hour
    DateTime startTime = DateTime.Now.AddDays(-1);
    DateTime endTime = DateTime.Now;

    protected override async Task OnInitializedAsync() {

        awsInstances = await AwsService.GetInstanceInfo("astutesocial");
        applications = awsInstances.Select(a => new ApplicationContext() { instance = a }).ToList();

        foreach (ApplicationContext app in applications) {
            app.chartName = $"{app.instance.Name} CPU Utilization";
            app.cpuUtilization = await AwsService.GetCpuUtilizationForInstance(app.instance.InstanceId, period, startTime, endTime);
            app.mostRecentDatapoint = (app.cpuUtilization != null && app.cpuUtilization.Datapoints.Count > 0) ? app.cpuUtilization.Datapoints[app.cpuUtilization.Datapoints.Count - 1] : null;
        }

        while (true) {
            StateHasChanged();   // refreshes everything, may interfere with your pages
            await Task.Delay(30_000);
            lastUpdatedTime = DateTime.Now.ToLongTimeString();
            foreach (ApplicationContext app in applications) {
                app.cpuUtilization = await AwsService.GetCpuUtilizationForInstance(app.instance.InstanceId, period, startTime, endTime);
                app.mostRecentDatapoint = (app.cpuUtilization != null && app.cpuUtilization.Datapoints.Count > 0) ? app.cpuUtilization.Datapoints[app.cpuUtilization.Datapoints.Count - 1] : null;
            }
        }

    }
}
