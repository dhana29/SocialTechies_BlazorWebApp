@page "/monitor"

@using Radzen
@using SocialTechies_BlazorWebApp.Data.Aws
@inject AwsService AwsService



<h1>Monitor</h1>

@if (cpuUtilization == null) {
    <p><em>Loading...</em></p>
}
else {
    <div class="chart-container container">
        <div class="row">
            <div class="col-sm-12">
                <RadzenChart>
                    <RadzenLineSeries Title=@chartName Data=@cpuUtilization.Datapoints CategoryProperty="TimeStamp" ValueProperty="Maximum" Smooth="true">
                        <RadzenMarkers MarkerType="MarkerType.Circle" />
                    </RadzenLineSeries>
                    <RadzenValueAxis>
                        <RadzenGridLines Visible="false" />
                        <RadzenAxisTitle Text="% of CPU Utilized" />
                    </RadzenValueAxis>
                </RadzenChart>


                <!-- Gauge -->
                <!--<RadzenRadialGauge Style="width: 100%; height: 300px;">
                    <RadzenRadialGaugeScale StartAngle="-150" EndAngle="150" Step="20" Min="0" Max="260" TickPosition=@GaugeTickPosition.Inside>
                        <RadzenRadialGaugeScalePointer Value=@mostRecentDataPoint.Maximum Length="0.6" ShowValue="true">
                            <Template Context="pointer">
                                <h4>
                                    @pointer.Value <sup>%</sup>
                                </h4>
                            </Template>
                        </RadzenRadialGaugeScalePointer>
                        <RadzenRadialGaugeScaleRange From="0" To="20" Fill="green" />
                        <RadzenRadialGaugeScaleRange From="20" To="70" Fill="orange" />
                        <RadzenRadialGaugeScaleRange From="70" To="100" Fill="red" />
                    </RadzenRadialGaugeScale>
                </RadzenRadialGauge>-->



            </div>
        </div>
    </div>
}


@code {
    private EcsMetrics.CpuUtilization cpuUtilization;
    private string autoscalingGroup = "asReports";
    private string chartName => $"{autoscalingGroup} CPU Utilization";
    private EcsMetrics.CpuUtilization.Datapoint mostRecentDataPoint => (cpuUtilization != null && cpuUtilization.Datapoints.Count > 0) ? cpuUtilization.Datapoints[cpuUtilization.Datapoints.Count - 1] : null;

    protected override async Task OnInitializedAsync() {
        // dev reports instance
        @*string instanceId = "i-01016354e1d126635";*@
        int period = 3600;
        DateTime startTime = DateTime.UtcNow.AddDays(-3);
        DateTime endTime = DateTime.UtcNow;

        cpuUtilization = await AwsService.GetCpuUtilizationForAutoscalingGroup(autoscalingGroup, period, startTime, endTime);
    }
}
