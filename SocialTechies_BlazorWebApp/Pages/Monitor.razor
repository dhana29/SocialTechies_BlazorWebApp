@page "/monitor"

@using SocialTechies_BlazorWebApp.Data.Aws
@using Radzen
@using System.Globalization
@inject AwsService AwsService




<h1>Monitor</h1><span class="float-right">Last updated at @theTime</span>

@if (cpuUtilization == null)
{
    <p><em>Loading...</em></p>
}
else
{


    <div class="col-sm-12 col-lg-8 my-3 my-lg-5">
        <RadzenArcGauge Style="width: 100%; height: 250px;">
            <RadzenArcGaugeScale Step="20" Min="0" Max="101" MinorStep="2" Radius="1.5" TickPosition=@tickPosition Y="0.9" Margin="0">
                <RadzenArcGaugeScaleValue Value=@mostRecentDataPoint.Maximum ShowValue=true>
                    <Template Context="pointer">
                        <h4>
                            @mostRecentDataPoint.Maximum.ToString("##0.00")<sup>%</sup>
                        </h4>
                    </Template>
                </RadzenArcGaugeScaleValue>
            </RadzenArcGaugeScale>
        </RadzenArcGauge>
    </div>

    <div class="chart-container container">
        <div class="row">
            <div class="col-sm-12">
                <RadzenChart>
                    <RadzenLineSeries Title="asReports CPU Utilization" Data="@cpuUtilization.Datapoints" ValueProperty="Maximum" CategoryProperty="TimeStamp" Smooth="true">

                        <ChildContent>
                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                        </ChildContent>
                        <TooltipTemplate Context="data">
                            <div>
                                <div><b>@data.TimeStamp.ToString("yyyy-MM-dd HH:mm tt"):</b></div>
                                @(data.Maximum.ToString("##0") ?? "Unknown")%
                            </div>
                        </TooltipTemplate>
                    </RadzenLineSeries>
                    
                    <RadzenCategoryAxis Padding="20">


                    </RadzenCategoryAxis>

                    <RadzenValueAxis>
                        <RadzenGridLines Visible="false" />
                        <RadzenAxisTitle Text="% of CPU Utilized" />
                        <RadzenValueAxis Min="0" Max="100" Step="10" />
                    </RadzenValueAxis>

                </RadzenChart>
            </div>
        </div>
    </div>


}


@code {
    private EcsMetrics.CpuUtilization cpuUtilization;

    private string autoscalingGroup = "asReports";
    private string chartName => $"{autoscalingGroup} CPU Utilization";
    private EcsMetrics.CpuUtilization.Datapoint mostRecentDataPoint => (cpuUtilization != null && cpuUtilization.Datapoints.Count > 0) ? cpuUtilization.Datapoints[cpuUtilization.Datapoints.Count - 1] : null;


    GaugeTickPosition tickPosition = GaugeTickPosition.Outside;
    bool smooth = false;
    string title = string.Empty;
    string theTime = DateTime.Now.ToLongTimeString();

    protected override async Task OnInitializedAsync()
    {
        // dev reports instance
        //string instanceId = "i-01016354e1d126635";

        int period = 3600;
        DateTime startTime = DateTime.Now.AddDays(-3);
        DateTime endTime = DateTime.Now;
        cpuUtilization = await AwsService.GetCpuUtilizationForAutoscalingGroup(autoscalingGroup, period, startTime, endTime);
        while (true)
        {

            StateHasChanged();   // refreshes everything, may interfere with your pages
                                 //cpuUtilization = await AwsService.GetCpuUtilization(instanceId, period, startTime, endTime);
            await Task.Delay(30_000);
            theTime = DateTime.Now.ToLongTimeString();
            cpuUtilization = await AwsService.GetCpuUtilizationForAutoscalingGroup(autoscalingGroup, period, startTime, endTime);
        }

    }


    string FormatTime(object value)
    {
        var datetime = (DateTime)value;

        if (datetime.Hour == 0 && datetime.Minute == 0)
            return datetime.ToString("yyyy-MM-dd");


        return datetime.ToString("HH:mm");
    }

}
