@page "/multimonitor"

@using SocialTechies_BlazorWebApp.Data.Aws
@using System.Globalization
@inject AwsService AwsService




<h1>Monitor</h1>

<span class="float-right">Last updated at @lastUpdatedTime</span>


<div class="chart-container container">
    <div class="row">
        <div class="col-sm-12">
            <RadzenChart>

                @foreach (var app in applications)
                {
                    <RadzenLineSeries Title="@app.instance.Name" Data="@app.cpuUtilization.Datapoints" ValueProperty="Maximum" CategoryProperty="TimeStamp" Smooth="true">

                        <ChildContent>
                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                        </ChildContent>
                        <TooltipTemplate Context="data">
                            <div>
                                <div><b>@data.TimeStamp.ToString("yyyy-MM-dd HH:mm tt"):</b></div>
                                @(data.Maximum.ToString("##0") ?? "Unknown")%
                            </div>
                        </TooltipTemplate>
                    </RadzenLineSeries>
                }


                        <RadzenCategoryAxis Padding="20">


                        </RadzenCategoryAxis>

                        <RadzenValueAxis>
                            <RadzenGridLines Visible="false" />
                            <RadzenAxisTitle Text="% of CPU Utilized" />
                            <RadzenValueAxis Min="0" Max="100" Step="10" />
                        </RadzenValueAxis>

                </RadzenChart>
        </div>
    </div>
</div>




@code {
    private List<AwsInstance> awsInstances = null;
    private List<ApplicationContext> applications = new List<ApplicationContext>();
    string lastUpdatedTime = DateTime.Now.ToLongTimeString();

    int period = 3600; // 1 hour
    DateTime startTime = DateTime.Now.AddDays(-1);
    DateTime endTime = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {

        awsInstances = await AwsService.GetInstanceInfo("astutesocial");
        applications = awsInstances.Select(a => new ApplicationContext() { instance = a }).ToList();

        applications = applications.Take(3).ToList();

        foreach (ApplicationContext app in applications)
        {
            app.chartName = $"{app.instance.Name} CPU Utilization";
            app.cpuUtilization = await AwsService.GetCpuUtilizationForInstance(app.instance.InstanceId, period, startTime, endTime, "CPUUtilization");
            app.mostRecentDatapointcpuUtilization = (app.cpuUtilization != null && app.cpuUtilization.Datapoints.Count > 0) ? app.cpuUtilization.Datapoints[app.cpuUtilization.Datapoints.Count - 1] : null;

            //app.statusCheckedFailed = await AwsService.GetCpuUtilizationForInstance(app.instance.InstanceId, period, startTime, endTime, "StatusCheckFailed");
            //app.mostRecentDatapointstatusCheckedFailed = (app.statusCheckedFailed != null && app.statusCheckedFailed.Datapoints.Count > 0) ? app.statusCheckedFailed.Datapoints[app.statusCheckedFailed.Datapoints.Count - 1] : null;

            //app.ebsReadBytes = await AwsService.GetCpuUtilizationForInstance(app.instance.InstanceId, period, startTime, endTime, "EBSReadBytes");
            //app.ebsReadBytes.Datapoints.ForEach(delegate (EcsMetrics.Metric.Datapoint dataPoint)
            //{
            //    dataPoint.Maximum = dataPoint.Maximum / 8 / 1024;
            //});
        }

        while (true)
        {
            StateHasChanged();   // refreshes everything, may interfere with your pages
            await Task.Delay(30_000);
            lastUpdatedTime = DateTime.Now.ToLongTimeString();
            foreach (ApplicationContext app in applications)
            {
                app.cpuUtilization = await AwsService.GetCpuUtilizationForInstance(app.instance.InstanceId, period, startTime, endTime);
                app.mostRecentDatapointcpuUtilization = (app.cpuUtilization != null && app.cpuUtilization.Datapoints.Count > 0) ? app.cpuUtilization.Datapoints[app.cpuUtilization.Datapoints.Count - 1] : null;

                //app.statusCheckedFailed = await AwsService.GetCpuUtilizationForInstance(app.instance.InstanceId, period, startTime, endTime, "StatusCheckFailed");
                //app.mostRecentDatapointstatusCheckedFailed = (app.statusCheckedFailed != null && app.statusCheckedFailed.Datapoints.Count > 0) ? app.statusCheckedFailed.Datapoints[app.statusCheckedFailed.Datapoints.Count - 1] : null;

                //app.ebsReadBytes = await AwsService.GetCpuUtilizationForInstance(app.instance.InstanceId, period, startTime, endTime, "EBSReadBytes");
                //app.ebsReadBytes.Datapoints.ForEach(delegate (EcsMetrics.Metric.Datapoint dataPoint)
                //{
                //    dataPoint.Maximum = dataPoint.Maximum / 8 / 1024;
                //});
            }
        }

    }
}
